/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Interpreter.jj */
/*@egen*//*
ProgramParser for simple WHILE
Version 0.2.3
*/

options {
             
               
                         
                          
  STATIC=false;
  DEBUG_PARSER=false;
}

PARSER_BEGIN(ProgramParser)

package src.interpreter;

import src.datatype.*;
import java.io.FileNotFoundException;
import java.util.HashMap;

public class ProgramParser/*@bgen(jjtree)*/implements ProgramParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTProgramParserState jjtree = new JJTProgramParserState();

/*@egen*/
  
  /**
  * input to program in string from
  */
  private static String stringInput;
  /**
  * input to program in data form
  */
  private static Data dataInput;
  /**
  * program code in a stringReader object
  */
  private static java.io.StringReader programCode;
  
  /**
  * command line call
  */
  public static void main(String[] args) throws ParseException, InterpreterException, src.inputparser.ParseException { 
    if (args.length == 2) {
      ProgramParser parser = new ProgramParser(args);
      System.out.println(parser.runProgram().dataToString());
    } else {
      System.out.println("Call format: <path> <input>");
    }
    
  }
  
  /**
  * constructor for IDE (makes an object without args[] from main)
  */
  public ProgramParser(String prog, String input) {
    ProgramParser.programCode = new java.io.StringReader(prog);
    ProgramParser.stringInput = input;
    //System.out.println("Program: " + prog + " - input: " + programInput);
  }
  
  /**
  * constructor for cmd line
  */
  public ProgramParser(String[] args) throws InterpreterException {
    java.util.Scanner scanner;
    String text = "";
    try {
      scanner = new java.util.Scanner(new java.io.File(args[0]));
      text = scanner.useDelimiter("\\A").next();
      scanner.close();
      ProgramParser.programCode = new java.io.StringReader(text);
    } catch (FileNotFoundException ex) {
      throw new InterpreterException("FileNotFoundException", "Check file path.", ex.getMessage());
    }
    ProgramParser.stringInput = args[1];
  }
  
  /**
  * parse program
  */
  public ASTProgram parseProgram() throws ParseException {
    //make new AST node for program and launch parser (ASTProgram = root node)
    //System.out.println("programCode:" + programCode);
    ProgramParser parser = new ProgramParser(programCode);
    ASTProgram program = parser.program();
    //print AST
    //program.dump(""); //remove this at the end (or make feature)
    //if reach here, parsing was without errors
    return program;
  }
  
  /**
  * run program
  */
  public Data runProgram() throws ParseException, InterpreterException, src.inputparser.ParseException {
    //parse input
    dataInput = src.inputparser.InputParser.run(stringInput);
    //parse program + get parser
    ASTProgram program = parseProgram();
    //new interpreter (visitor)
    ProgramVisitor v = new ProgramVisitor();
    //initialiseRandomPopulation interpreter and accept first node, print result
    Data output = (Data) program.jjtAccept(v, null);
    return output;
  }
}

PARSER_END(ProgramParser)

// SKIP characters, white space, new lines and comments
SKIP: { " " | "\t" | "\r" | "\n"
        // initial //, anything but new line, new line
        | <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")> //single line
        //multi-line comments
        | <"(*" (~["*"])* "*" (~["*",")"] (~["*"])* "*" | "*")* ")">
      }

// TOKEN KEYWORDS
TOKEN: {
    <READ: "read"             >
  | <WRITE: "write"           >
  | <ASSIGN: ":="             >
  | <WHILE: "while"           >
  | <IF: "if"                 >
  | <ELSE: "else"             >
  | <CONS: "cons"             >
  | <NIL: "nil"> 
  | <HD: "hd"                 >
  | <TL: "tl"                 >
  | <SWITCH: "switch"         >
  | <CASE: "case"             >
  | <DEFAULTCASE: "default"   >
  | <DOT: "."                 >
  | <ATOM: "quote"|"var">
}
    
// TOKENS IDENTIFIERS
TOKEN: {
    <BOOLEAN: "true" | "false">
  | <VAR: ["A"-"Z","a"-"z","/"](["A"-"Z","a"-"z","0"-"9","_","-","$","/","\\","."])*>
  | <NUM: (["0"-"9"])+>
}

/**
* #Program
* gets progname, input, block, and output. Returns itself.
*/
ASTProgram program()         : {/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Program */
  try {
/*@egen*/
  progname() <READ> input() block() <WRITE> output()
  <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/**
* #progname
* puts name in node data
*/
void progname()          : {/*@bgen(jjtree) progname */
                            ASTprogname jjtn000 = new ASTprogname(JJTPROGNAME);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) progname */
  try {
/*@egen*/
  t=<VAR>/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ {
    jjtn000.data.put("progname", t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/**
* #input
* puts input var and input in node data
*/
void input()       : {/*@bgen(jjtree) input */
                      ASTinput jjtn000 = new ASTinput(JJTINPUT);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) input */
  try {
/*@egen*/
  t=<VAR>/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ {
    jjtn000.data.put("inputVar", t.image);
    jjtn000.data.put("input", dataInput);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/**
* #output
* puts output var in node data
*/
void output()        : {/*@bgen(jjtree) output */
                        ASToutput jjtn000 = new ASToutput(JJTOUTPUT);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) output */
  try {
/*@egen*/
  t=<VAR>/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ {
    jjtn000.data.put("outputVar", t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/**
* #Block
* gets statements
*/
void block()       : {/*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Block */
  try {
/*@egen*/
  "{" (statements())? "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/**
* statements
*/
void statements(): {} {
  command() (";" statements())?
}

/**
* command
* creates a node from the command parsed
* nodes: #Assign, #Macro, #While, #If, #Switch
*/
void command():{} {
  //ASSIGN (<VAR> <ASSIGN> <EXPR>)or(<VAR> <ASSIGN> <PROG> <EXPR>)
  (
    LOOKAHEAD(variable() <ASSIGN> "<" variable() ">" expr())/*@bgen(jjtree) Assign */
    {
      ASTAssign jjtn002 = new ASTAssign(JJTASSIGN);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/
    ( variable() <ASSIGN>/*@bgen(jjtree) Macro */
                          {
                            ASTMacro jjtn001 = new ASTMacro(JJTMACRO);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                          }
                          try {
/*@egen*/ ("<" variable() ">" expr())/*@bgen(jjtree)*/
                          } catch (Throwable jjte001) {
                            if (jjtc001) {
                              jjtree.clearNodeScope(jjtn001);
                              jjtc001 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte001 instanceof RuntimeException) {
                              throw (RuntimeException)jjte001;
                            }
                            if (jjte001 instanceof ParseException) {
                              throw (ParseException)jjte001;
                            }
                            throw (Error)jjte001;
                          } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001, true);
                            }
                          }
/*@egen*/       )/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
    }
/*@egen*/        
    |/*@bgen(jjtree) Assign */
    {
      ASTAssign jjtn003 = new ASTAssign(JJTASSIGN);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
    }
    try {
/*@egen*/
    ( variable() <ASSIGN>  expr() )/*@bgen(jjtree)*/
    } catch (Throwable jjte003) {
      if (jjtc003) {
        jjtree.clearNodeScope(jjtn003);
        jjtc003 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte003 instanceof RuntimeException) {
        throw (RuntimeException)jjte003;
      }
      if (jjte003 instanceof ParseException) {
        throw (ParseException)jjte003;
      }
      throw (Error)jjte003;
    } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
      }
    }
/*@egen*/        
  )
  //WHILE (<WHILE> <EXPR> <BLOCK>)
  |/*@bgen(jjtree) While */
   {
     ASTWhile jjtn004 = new ASTWhile(JJTWHILE);
     boolean jjtc004 = true;
     jjtree.openNodeScope(jjtn004);
   }
   try {
/*@egen*/( <WHILE> expr() block() )/*@bgen(jjtree)*/
   } catch (Throwable jjte004) {
     if (jjtc004) {
       jjtree.clearNodeScope(jjtn004);
       jjtc004 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte004 instanceof RuntimeException) {
       throw (RuntimeException)jjte004;
     }
     if (jjte004 instanceof ParseException) {
       throw (ParseException)jjte004;
     }
     throw (Error)jjte004;
   } finally {
     if (jjtc004) {
       jjtree.closeNodeScope(jjtn004, true);
     }
   }
/*@egen*/       
  
  //IF (<IF> <EXPR> <BLOCK> (<ELSE> <BLOCK>)?)
  |/*@bgen(jjtree) If */
   {
     ASTIf jjtn005 = new ASTIf(JJTIF);
     boolean jjtc005 = true;
     jjtree.openNodeScope(jjtn005);
   }
   try {
/*@egen*/( <IF> expr() block() (LOOKAHEAD(<ELSE>) <ELSE> block())? )/*@bgen(jjtree)*/
   } catch (Throwable jjte005) {
     if (jjtc005) {
       jjtree.clearNodeScope(jjtn005);
       jjtc005 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte005 instanceof RuntimeException) {
       throw (RuntimeException)jjte005;
     }
     if (jjte005 instanceof ParseException) {
       throw (ParseException)jjte005;
     }
     throw (Error)jjte005;
   } finally {
     if (jjtc005) {
       jjtree.closeNodeScope(jjtn005, true);
     }
   }
/*@egen*/    
    
  //SWITCH (<SWITCH> <EXPR> (<RULE>)+ (<DEFAULTCASE>)?)
  |/*@bgen(jjtree) Switch */
   {
     ASTSwitch jjtn006 = new ASTSwitch(JJTSWITCH);
     boolean jjtc006 = true;
     jjtree.openNodeScope(jjtn006);
   }
   try {
/*@egen*/( <SWITCH> expr() "{" (rule())+ (defaultCase())? "}" )/*@bgen(jjtree)*/
   } catch (Throwable jjte006) {
     if (jjtc006) {
       jjtree.clearNodeScope(jjtn006);
       jjtc006 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte006 instanceof RuntimeException) {
       throw (RuntimeException)jjte006;
     }
     if (jjte006 instanceof ParseException) {
       throw (ParseException)jjte006;
     }
     throw (Error)jjte006;
   } finally {
     if (jjtc006) {
       jjtree.closeNodeScope(jjtn006, true);
     }
   }
/*@egen*/        
}

/**
* #Case
* creates a case node with an ExprList and a Block
*/
void rule()      : {/*@bgen(jjtree) Case */
  ASTCase jjtn000 = new ASTCase(JJTCASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Case */
  try {
/*@egen*/
  <CASE>/*@bgen(jjtree) ExprList */
         {
           ASTExprList jjtn001 = new ASTExprList(JJTEXPRLIST);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
         }
         try {
/*@egen*/ exprList()/*@bgen(jjtree)*/
         } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             throw (RuntimeException)jjte001;
           }
           if (jjte001 instanceof ParseException) {
             throw (ParseException)jjte001;
           }
           throw (Error)jjte001;
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001, true);
           }
         }
/*@egen*/          ":"/*@bgen(jjtree) Block */
                                 {
                                   ASTBlock jjtn002 = new ASTBlock(JJTBLOCK);
                                   boolean jjtc002 = true;
                                   jjtree.openNodeScope(jjtn002);
                                 }
                                 try {
/*@egen*/ statements()/*@bgen(jjtree)*/
                                 } catch (Throwable jjte002) {
                                   if (jjtc002) {
                                     jjtree.clearNodeScope(jjtn002);
                                     jjtc002 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte002 instanceof RuntimeException) {
                                     throw (RuntimeException)jjte002;
                                   }
                                   if (jjte002 instanceof ParseException) {
                                     throw (ParseException)jjte002;
                                   }
                                   throw (Error)jjte002;
                                 } finally {
                                   if (jjtc002) {
                                     jjtree.closeNodeScope(jjtn002, true);
                                   }
                                 }
/*@egen*/      /*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/**
* #DefaultCase
* creates 
*/
void defaultCase()             : {/*@bgen(jjtree) DefaultCase */
  ASTDefaultCase jjtn000 = new ASTDefaultCase(JJTDEFAULTCASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) DefaultCase */
  try {
/*@egen*/
  <DEFAULTCASE> ":"/*@bgen(jjtree) Block */
                    {
                      ASTBlock jjtn001 = new ASTBlock(JJTBLOCK);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
                    }
                    try {
/*@egen*/ statements()/*@bgen(jjtree)*/
                    } catch (Throwable jjte001) {
                      if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte001 instanceof RuntimeException) {
                        throw (RuntimeException)jjte001;
                      }
                      if (jjte001 instanceof ParseException) {
                        throw (ParseException)jjte001;
                      }
                      throw (Error)jjte001;
                    } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, true);
                      }
                    }
/*@egen*/      /*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/**
* expr
* checks if expr is an equality #Equal
*/
void expr(): {Token t;} {
  LOOKAHEAD(expr2() "=")/*@bgen(jjtree) Equal */
  {
    ASTEqual jjtn001 = new ASTEqual(JJTEQUAL);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (expr2() "=" expr())/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/       
  |
  expr2()
}

/**
* expr2
* cannot be an equality
* nodes: #nil, #Cons, #Hd, #Tl, var, #num, #bool, #ExprList, #atom
*/
void expr2(): {Token t;} {/*@bgen(jjtree) nil */
  {
    ASTnil jjtn001 = new ASTnil(JJTNIL);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  <NIL>/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/     
  
  | LOOKAHEAD(<CONS> expr() expr())/*@bgen(jjtree) Cons */
    {
      ASTCons jjtn002 = new ASTCons(JJTCONS);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/
    ( <CONS> expr() expr() )/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
    }
/*@egen*/      
    |
    t=<CONS>/*@bgen(jjtree) atom */
             {
               ASTatom jjtn003 = new ASTatom(JJTATOM);
               boolean jjtc003 = true;
               jjtree.openNodeScope(jjtn003);
             }
             try {
/*@egen*//*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn003, true);
               jjtc003 = false;
             }
/*@egen*/ {jjtn003.data.put("atom", t.image);}/*@bgen(jjtree)*/
             } finally {
               if (jjtc003) {
                 jjtree.closeNodeScope(jjtn003, true);
               }
             }
/*@egen*/      
  
  | LOOKAHEAD(<HD> expr())/*@bgen(jjtree) Hd */
    {
      ASTHd jjtn004 = new ASTHd(JJTHD);
      boolean jjtc004 = true;
      jjtree.openNodeScope(jjtn004);
    }
    try {
/*@egen*/
    ( <HD> expr() )/*@bgen(jjtree)*/
    } catch (Throwable jjte004) {
      if (jjtc004) {
        jjtree.clearNodeScope(jjtn004);
        jjtc004 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte004 instanceof RuntimeException) {
        throw (RuntimeException)jjte004;
      }
      if (jjte004 instanceof ParseException) {
        throw (ParseException)jjte004;
      }
      throw (Error)jjte004;
    } finally {
      if (jjtc004) {
        jjtree.closeNodeScope(jjtn004, true);
      }
    }
/*@egen*/    
    |
    t=<HD>/*@bgen(jjtree) atom */
           {
             ASTatom jjtn005 = new ASTatom(JJTATOM);
             boolean jjtc005 = true;
             jjtree.openNodeScope(jjtn005);
           }
           try {
/*@egen*//*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn005, true);
             jjtc005 = false;
           }
/*@egen*/ {jjtn005.data.put("atom", t.image);}/*@bgen(jjtree)*/
           } finally {
             if (jjtc005) {
               jjtree.closeNodeScope(jjtn005, true);
             }
           }
/*@egen*/      
  
  | LOOKAHEAD(<TL> expr())/*@bgen(jjtree) Tl */
    {
      ASTTl jjtn006 = new ASTTl(JJTTL);
      boolean jjtc006 = true;
      jjtree.openNodeScope(jjtn006);
    }
    try {
/*@egen*/
    ( <TL> expr() )/*@bgen(jjtree)*/
    } catch (Throwable jjte006) {
      if (jjtc006) {
        jjtree.clearNodeScope(jjtn006);
        jjtc006 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte006 instanceof RuntimeException) {
        throw (RuntimeException)jjte006;
      }
      if (jjte006 instanceof ParseException) {
        throw (ParseException)jjte006;
      }
      throw (Error)jjte006;
    } finally {
      if (jjtc006) {
        jjtree.closeNodeScope(jjtn006, true);
      }
    }
/*@egen*/    
    |
    t=<TL>/*@bgen(jjtree) atom */
           {
             ASTatom jjtn007 = new ASTatom(JJTATOM);
             boolean jjtc007 = true;
             jjtree.openNodeScope(jjtn007);
           }
           try {
/*@egen*//*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn007, true);
             jjtc007 = false;
           }
/*@egen*/ {jjtn007.data.put("atom", t.image);}/*@bgen(jjtree)*/
           } finally {
             if (jjtc007) {
               jjtree.closeNodeScope(jjtn007, true);
             }
           }
/*@egen*/      
  
  | variable()
    
  | t=<NUM>/*@bgen(jjtree) num */
            {
              ASTnum jjtn008 = new ASTnum(JJTNUM);
              boolean jjtc008 = true;
              jjtree.openNodeScope(jjtn008);
            }
            try {
/*@egen*//*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn008, true);
              jjtc008 = false;
            }
/*@egen*/ {
      jjtn008.data.put("num", t.image);
    }/*@bgen(jjtree)*/
            } finally {
              if (jjtc008) {
                jjtree.closeNodeScope(jjtn008, true);
              }
            }
/*@egen*/    
    
  | t=<BOOLEAN>/*@bgen(jjtree) bool */
                {
                  ASTbool jjtn009 = new ASTbool(JJTBOOL);
                  boolean jjtc009 = true;
                  jjtree.openNodeScope(jjtn009);
                }
                try {
/*@egen*//*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn009, true);
                  jjtc009 = false;
                }
/*@egen*/ {
      jjtn009.data.put("boolean", t.image);
    }/*@bgen(jjtree)*/
                } finally {
                  if (jjtc009) {
                    jjtree.closeNodeScope(jjtn009, true);
                  }
                }
/*@egen*/     
    
  |/*@bgen(jjtree) ExprList */
   {
     ASTExprList jjtn010 = new ASTExprList(JJTEXPRLIST);
     boolean jjtc010 = true;
     jjtree.openNodeScope(jjtn010);
   }
   try {
/*@egen*/( "[" (exprList())? "]" )/*@bgen(jjtree)*/
   } catch (Throwable jjte010) {
     if (jjtc010) {
       jjtree.clearNodeScope(jjtn010);
       jjtc010 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte010 instanceof RuntimeException) {
       throw (RuntimeException)jjte010;
     }
     if (jjte010 instanceof ParseException) {
       throw (ParseException)jjte010;
     }
     throw (Error)jjte010;
   } finally {
     if (jjtc010) {
       jjtree.closeNodeScope(jjtn010, true);
     }
   }
/*@egen*/          
    
  | (t=<ATOM>|t=<ASSIGN>|t=<WHILE>|t=<IF>)/*@bgen(jjtree) atom */
                                           {
                                             ASTatom jjtn011 = new ASTatom(JJTATOM);
                                             boolean jjtc011 = true;
                                             jjtree.openNodeScope(jjtn011);
                                           }
                                           try {
/*@egen*//*@bgen(jjtree)*/
                                           {
                                             jjtree.closeNodeScope(jjtn011, true);
                                             jjtc011 = false;
                                           }
/*@egen*/ {
      jjtn011.data.put("atom", t.image);
    }/*@bgen(jjtree)*/
                                           } finally {
                                             if (jjtc011) {
                                               jjtree.closeNodeScope(jjtn011, true);
                                             }
                                           }
/*@egen*/     
  
  | "(" expr() ")"
}
  
/**
* #var
* puts variable name in node data
*/
void variable()     : {/*@bgen(jjtree) var */
                       ASTvar jjtn000 = new ASTvar(JJTVAR);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) var */
  try {
/*@egen*/
  t=<VAR>/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ {jjtn000.data.put("varname", t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/**
* exprList
* has 1 or more expressions separated by ","
*/
void exprList(): {} {
  LOOKAHEAD(expr() "," exprList())
  expr() "," exprList() | expr()
}